name: Publish to PyPI

on:

  release:
    types: [released]

jobs:
  test_and_build:
    # The type of runner that the job will run on
    if: "!github.event.release.prerelease"
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11', '3.12']
        poetry-version: ['1.8.3']
        os: [ubuntu-latest, macos-latest, windows-latest]
    runs-on: ${{ matrix.os }}

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
           python-version: ${{ matrix.python-version }}
      - name: Set up Poetry ${{ matrix.poetry-version }}
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: ${{ matrix.poetry-version }}

      - name: Set up cache
        uses: actions/cache@v1
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - name: Install dependencies
        run: poetry install

      - name: Lint with flake8
        run: |
            # stop the build if there are Python syntax errors or undefined names
            poetry run flake8 . --count --max-line-length=127 --show-source --statistics
      - name: Run tests
        run: |
            poetry run pytest

      - name: Build
        run: poetry build

      - name: Archive production artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: |
            dist


  gather_n_publish:
    runs-on: ubuntu-latest
    needs: test_and_build

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Set up Python 3.12
        uses: actions/setup-python@v4
        with:
           python-version: '3.12'

      - name: Set up Poetry 1.8.3
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: '1.8.3'

      - name: Set up cache
        uses: actions/cache@v1
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        run: poetry run pip --version >/dev/null 2>&1 || rm -rf .venv

      - uses: actions/download-artifact@v4
        with:
          name: wheels
          path: dist/


      - name: Install dependencies
        run: |
            poetry install

      - name: Build sdist
        run: poetry build -f sdist

      - name: Display structure of downloaded files
        run: ls -la
        working-directory: dist/

      - run: poetry config pypi-token.pypi ${{ secrets.PYPI_TOKEN }}

      - name: Publish package
        run: poetry publish --no-interaction -vvv
